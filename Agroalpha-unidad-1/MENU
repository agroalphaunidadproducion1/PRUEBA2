<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - Sistema Agroalpha</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            display: flex;
            background-color: #f5f5f5;
            color: #333;
            min-height: 100vh;
        }
        
        /* Sidebar */
        .sidebar {
            width: 250px;
            background-color: #2c3e50;
            color: white;
            height: 100vh;
            position: fixed;
            padding: 20px 0;
            overflow-y: auto;
        }
        
        .logo {
            padding: 0 20px 20px;
            border-bottom: 1px solid #34495e;
            margin-bottom: 20px;
        }
        
        .logo h1 {
            font-size: 24px;
            font-weight: 600;
        }
        
        .user-info {
            padding: 0 20px 20px;
            border-bottom: 1px solid #34495e;
            margin-bottom: 20px;
        }
        
        .user-info p {
            margin-bottom: 5px;
            font-size: 14px;
        }
        
        .role-badge {
            display: inline-block;
            padding: 3px 8px;
            border-radius: 10px;
            font-size: 0.7rem;
            font-weight: 600;
            color: white;
            margin-top: 4px;
        }
        
        .admin-badge { background-color: #1976D2; }
        .supervisor-badge { background-color: #7B1FA2; }
        .grower-badge { background-color: #D32F2F; }
        .digitador-badge { background-color: #C2185B; }
        .fitosanidad-badge { background-color: #0288D1; }
        .culturales-badge { background-color: #5D4037; }
        .riego-badge { background-color: #0097A7; }
        .invitado-badge { background-color: #616161; }
        .gerente-badge { background-color: #FF9800; }
        .camaron-badge { background-color: #607D8B; }
        .jefe-vivero-badge { background-color: #009688; }
        
        .nav-section {
            margin-bottom: 25px;
        }
        
        .nav-section h3 {
            font-size: 14px;
            text-transform: uppercase;
            padding: 0 20px;
            margin-bottom: 10px;
            color: #95a5a6;
        }
        
        .nav-item {
            padding: 12px 20px;
            display: flex;
            align-items: center;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        .nav-item:hover {
            background-color: #34495e;
        }
        
        .nav-item i {
            margin-right: 10px;
            width: 20px;
            text-align: center;
        }
        
        .nav-item.active {
            background-color: #3498db;
        }
        
        /* Main Content */
        .main-content {
            flex: 1;
            margin-left: 250px;
            padding: 20px;
        }
        
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 15px;
            border-bottom: 1px solid #ddd;
        }
        
        .breadcrumb {
            font-size: 14px;
            color: #7f8c8d;
        }
        
        .breadcrumb a {
            color: #3498db;
            text-decoration: none;
        }
        
        .page-title {
            font-size: 24px;
            font-weight: 600;
            margin: 20px 0;
            color: #2c3e50;
        }
        
        .dashboard-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 20px;
        }
        
        .dashboard-card {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 25px;
            transition: transform 0.3s, box-shadow 0.3s;
            cursor: pointer;
        }
        
        .dashboard-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15);
        }
        
        .card-icon {
            font-size: 2.5rem;
            color: #3498db;
            margin-bottom: 15px;
        }
        
        .card-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 10px;
            color: #2c3e50;
        }
        
        .card-description {
            font-size: 14px;
            color: #7f8c8d;
            line-height: 1.5;
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: #3498db;
        }
        
        .error-message {
            text-align: center;
            padding: 20px;
            color: #e74c3c;
            background-color: #fadbd8;
            border-radius: 5px;
            margin: 10px 0;
        }
        
        .debug-info {
            font-size: 0.8rem;
            color: #6c757d;
            margin-top: 10px;
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 5px;
            border-left: 4px solid #3498db;
        }
        
        .debug-toggle {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 10px;
            font-size: 0.8rem;
        }
        
        /* Responsive */
        @media (max-width: 768px) {
            .sidebar {
                width: 70px;
                overflow: hidden;
            }
            
            .logo h1, .user-info p, .nav-section h3, .nav-item span {
                display: none;
            }
            
            .nav-item {
                justify-content: center;
            }
            
            .nav-item i {
                margin-right: 0;
                font-size: 18px;
            }
            
            .main-content {
                margin-left: 70px;
            }
            
            .dashboard-container {
                grid-template-columns: 1fr;
            }
        }
    </style>
    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-database-compat.js"></script>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="logo">
            <h1>Agroalpha</h1>
        </div>
        
        <div class="user-info">
            <p id="user-unit">Unidad de Producción 1</p>
            <p id="user-name">Usuario</p>
            <p id="user-role" class="role-badge">Rol</p>
        </div>
        
        <div class="nav-section">
            <h3>Navegación Principal</h3>
            <div class="nav-item active">
                <i class="fas fa-tachometer-alt"></i>
                <span>Dashboard</span>
            </div>
            <div class="nav-item">
                <i class="fas fa-bell"></i>
                <span>Notificaciones</span>
            </div>
        </div>
        
        <div class="nav-section">
            <h3>Módulos del Sistema</h3>
            <div id="modules-nav">
                <div class="nav-item">
                    <i class="fas fa-spinner fa-spin"></i>
                    <span>Cargando módulos...</span>
                </div>
            </div>
        </div>
        
        <div class="nav-section">
            <h3>Administración</h3>
            <div class="nav-item">
                <i class="fas fa-cog"></i>
                <span>Configuración</span>
            </div>
            <div class="nav-item">
                <i class="fas fa-user"></i>
                <span>Mi Perfil</span>
            </div>
            <div class="nav-item">
                <i class="fas fa-question-circle"></i>
                <span>Ayuda</span>
            </div>
            <div class="nav-item" id="logoutBtn">
                <i class="fas fa-sign-out-alt"></i>
                <span>Cerrar Sesión</span>
            </div>
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="main-content">
        <div class="header">
            <div class="breadcrumb">
                <a href="#">Dashboard</a> / Módulos del Sistema
            </div>
        </div>
        
        <h1 class="page-title">Dashboard Principal</h1>
        
        <div class="dashboard-container" id="dashboardContainer">
            <div class="loading">
                <i class="fas fa-spinner fa-spin"></i> Cargando módulos...
            </div>
        </div>
        
        <button class="debug-toggle" id="debugToggle">Mostrar información técnica</button>
        <div id="debugInfo" class="debug-info" style="display: none;"></div>
    </div>

    <script>
        // Configuración de Firebase
        const firebaseConfig = {
            databaseURL: "https://agro-productos-default-rtdb.firebaseio.com/"
        };
        
        // Inicializar Firebase
        firebase.initializeApp(firebaseConfig);
        const database = firebase.database();
        const activeUsersRef = database.ref('uactivos');
        const modulesRef = database.ref('modules');
        const accessRef = database.ref('accesos');
        
        // Mapeo de IDs en español a inglés (para compatibilidad)
        const moduleIdMap = {
            // Módulos en español -> inglés
            'usuarios': 'users',
            'asistencias': 'attendance',
            'personal': 'staff',
            'registros': 'records',
            'cosechas': 'harvest',
            'documentos': 'documents',
            'beneficios': 'beneficios',
            'actividades': 'activities',
            'quimicos': 'chemicals',
            'basedatos': 'database',
            'aplicaciones': 'applications',
            'ver-aplicaciones': 'view-apps',
            'registrar-asistencia': 'register-att',
            'registrar-actividades': 'register-act',
            'camaron': 'shrimp',
            'proyecciones': 'projections',
            'consultas': 'queries',
            'plagas': 'pests',
            'riego': 'irrigation',
            'humedad': 'humidity',
            'reportes-publicos': 'public-reports',
            
            // Módulos en inglés (para referencia)
            'users': 'users',
            'attendance': 'attendance',
            'staff': 'staff',
            'records': 'records',
            'harvest': 'harvest',
            'documents': 'documents',
            'beneficios': 'beneficios',
            'activities': 'activities',
            'chemicals': 'chemicals',
            'database': 'database',
            'applications': 'applications',
            'view-apps': 'view-apps',
            'register-att': 'register-att',
            'register-act': 'register-act',
            'shrimp': 'shrimp',
            'projections': 'projections',
            'queries': 'queries',
            'pests': 'pests',
            'irrigation': 'irrigation',
            'humidity': 'humidity',
            'public-reports': 'public-reports'
        };
        
        // Variables globales
        let systemModules = [];
        let roleAccess = {};
        let userRole = '';
        
        // Verificar sesión al cargar
        document.addEventListener('DOMContentLoaded', function() {
            const userData = JSON.parse(sessionStorage.getItem('currentUser'));
            
            if (!userData || !userData.username) {
                window.location.href = 'index.html';
                return;
            }
            
            // Guardar el rol del usuario
            userRole = userData.role;
            
            // Configurar eventos
            document.getElementById('logoutBtn').addEventListener('click', logout);
            document.getElementById('debugToggle').addEventListener('click', toggleDebugInfo);
            
            // Verificar si el usuario sigue activo en uactivos
            activeUsersRef.child(userData.username).once('value')
                .then(snapshot => {
                    if (!snapshot.exists()) {
                        logout();
                        return;
                    }
                    
                    // Mostrar información del usuario
                    displayUserInfo(userData);
                    
                    // Cargar datos de Firebase
                    loadFirebaseData();
                })
                .catch(error => {
                    console.error('Error verificando sesión activa:', error);
                    showError('Error de conexión. Intente recargar la página.');
                });
        });
        
        // Cargar datos desde Firebase
        function loadFirebaseData() {
            // Cargar módulos y accesos en paralelo
            Promise.all([
                modulesRef.once('value'),
                accessRef.once('value')
            ])
            .then(([modulesSnapshot, accessSnapshot]) => {
                // Procesar módulos
                if (modulesSnapshot.exists()) {
                    const modulesData = modulesSnapshot.val();
                    
                    // Verificar si modulesData es un array o un objeto
                    if (Array.isArray(modulesData)) {
                        systemModules = modulesData;
                    } else if (typeof modulesData === 'object' && modulesData !== null) {
                        // Convertir objeto a array
                        systemModules = Object.values(modulesData);
                    } else {
                        systemModules = [];
                    }
                    
                    console.log('Módulos cargados:', systemModules);
                } else {
                    console.error('No se encontraron módulos en Firebase');
                    systemModules = [];
                }
                
                // Procesar accesos
                if (accessSnapshot.exists()) {
                    roleAccess = accessSnapshot.val();
                    console.log('Accesos cargados:', roleAccess);
                } else {
                    console.error('No se encontraron accesos en Firebase');
                    roleAccess = {};
                }
                
                // Generar las tarjetas con los permisos del usuario
                generateDashboardCards();
                generateNavItems();
            })
            .catch(error => {
                console.error('Error cargando datos de Firebase:', error);
                showError('Error al cargar los módulos. Intente recargar la página.');
                
                // Mostrar información de depuración
                showDebugInfo(`
                    <strong>Error de conexión:</strong><br>
                    ${error.message}<br><br>
                    <strong>URL de Firebase:</strong><br>
                    ${firebaseConfig.databaseURL}
                `);
            });
        }
        
        // Mostrar información del usuario
        function displayUserInfo(userData) {
            document.getElementById('user-name').textContent = userData.name || userData.username;
            document.getElementById('user-unit').textContent = userData.unit || 'Unidad de Producción 1';
            
            const roleBadge = document.getElementById('user-role');
            roleBadge.textContent = userData.role;
            roleBadge.className = 'role-badge ' + getBadgeClass(userData.role);
        }
        
        // Obtener clase CSS para el badge según el rol
        function getBadgeClass(role) {
            const roleClasses = {
                'Administrador': 'admin-badge',
                'Supervisor': 'supervisor-badge',
                'Grower': 'grower-badge',
                'Grower Junior': 'grower-badge',
                'Digitador': 'digitador-badge',
                'Técnico Fitosanidad': 'fitosanidad-badge',
                'Técnico Prácticas Culturales': 'culturales-badge',
                'Técnico Riego': 'riego-badge',
                'Invitado': 'invitado-badge',
                'Gerente de Producción': 'gerente-badge',
                'Gerente General': 'gerente-badge',
                'Camaron': 'camaron-badge',
                'Jefe de Vivero': 'jefe-vivero-badge'
            };
            return roleClasses[role] || 'invitado-badge';
        }
        
        // Normalizar ID del módulo (para manejar español/inglés)
        function normalizeModuleId(moduleId) {
            if (!moduleId) return null;
            
            // Si el ID ya está en inglés, devolverlo tal cual
            if (moduleIdMap[moduleId]) {
                return moduleIdMap[moduleId];
            }
            
            // Si no está en el mapa, intentar encontrar coincidencia
            const normalizedId = moduleId.toLowerCase().replace(/[^a-z0-9]/g, '-');
            return moduleIdMap[normalizedId] || moduleId;
        }
        
        // Generar tarjetas del dashboard según los permisos del rol
        function generateDashboardCards() {
            const container = document.getElementById('dashboardContainer');
            
            // Verificar si tenemos los datos necesarios
            if (systemModules.length === 0) {
                container.innerHTML = '<div class="error-message">No hay módulos configurados en el sistema.</div>';
                showDebugInfo(`
                    <strong>Problema detectado:</strong> No hay módulos en la base de datos.<br>
                    <strong>Solución:</strong> Accede a la página de administración para crear módulos.
                `);
                return;
            }
            
            if (Object.keys(roleAccess).length === 0) {
                container.innerHTML = '<div class="error-message">No hay permisos configurados en el sistema.</div>';
                showDebugInfo(`
                    <strong>Problema detectado:</strong> No hay permisos en la base de datos.<br>
                    <strong>Solución:</strong> Accede a la página de administración para configurar permisos.
                `);
                return;
            }
            
            // Obtener los accesos para el rol del usuario
            const userAccess = roleAccess[userRole];
            
            if (!userAccess) {
                container.innerHTML = `<div class="error-message">No se encontraron permisos para el rol "${userRole}".</div>`;
                showDebugInfo(`
                    <strong>Problema detectado:</strong> No hay permisos para el rol "${userRole}".<br>
                    <strong>Roles con permisos:</strong> ${Object.keys(roleAccess).join(', ')}<br>
                    <strong>Solución:</strong> Accede a la página de administración para asignar permisos a este rol.
                `);
                return;
            }
            
            // Preparar información de depuración
            let debugHTML = `
                <strong>Información de depuración:</strong><br>
                <strong>Rol del usuario:</strong> ${userRole}<br>
                <strong>Módulos cargados:</strong> ${systemModules.length}<br>
                <strong>Permisos para este rol:</strong> ${Object.keys(userAccess).filter(id => userAccess[id]).length} módulos permitidos<br><br>
            `;
            
            // Filtrar módulos a los que el usuario tiene acceso
            const accessibleModules = [];
            
            systemModules.forEach(module => {
                if (!module || !module.id) return;
                
                // Normalizar ID del módulo para compatibilidad
                const normalizedId = normalizeModuleId(module.id);
                const hasAccess = userAccess[normalizedId] || userAccess[module.id];
                
                debugHTML += `<strong>Módulo:</strong> ${module.id} → ${normalizedId} → ${hasAccess ? 'ACCESO PERMITIDO' : 'sin acceso'}<br>`;
                
                if (hasAccess) {
                    accessibleModules.push(module);
                }
            });
            
            // Mostrar información de depuración
            showDebugInfo(debugHTML);
            
            if (accessibleModules.length === 0) {
                container.innerHTML = '<div class="error-message">No tiene acceso a ningún módulo. Contacte al administrador.</div>';
                return;
            }
            
            // Generar tarjetas para los módulos accesibles
            container.innerHTML = '';
            accessibleModules.forEach(module => {
                const card = document.createElement('div');
                card.className = 'dashboard-card';
                card.onclick = function() {
                    window.location.href = module.link || '#';
                };
                
                card.innerHTML = `
                    <div class="card-icon"><i class="fas ${module.icon || 'fa-cube'}"></i></div>
                    <div class="card-title">${module.title || 'Módulo sin nombre'}</div>
                    <div class="card-description">${module.description || 'Descripción no disponible'}</div>
                `;
                
                container.appendChild(card);
            });
        }
        
        // Generar elementos de navegación en el menú lateral
        function generateNavItems() {
            const container = document.getElementById('modules-nav');
            
            // Verificar si tenemos los datos necesarios
            if (systemModules.length === 0 || Object.keys(roleAccess).length === 0) {
                return;
            }
            
            // Obtener los accesos para el rol del usuario
            const userAccess = roleAccess[userRole];
            
            if (!userAccess) {
                return;
            }
            
            // Filtrar módulos a los que el usuario tiene acceso
            const accessibleModules = [];
            
            systemModules.forEach(module => {
                if (!module || !module.id) return;
                
                // Normalizar ID del módulo para compatibilidad
                const normalizedId = normalizeModuleId(module.id);
                const hasAccess = userAccess[normalizedId] || userAccess[module.id];
                
                if (hasAccess) {
                    accessibleModules.push(module);
                }
            });
            
            if (accessibleModules.length === 0) {
                container.innerHTML = '<div class="nav-item"><span>Sin módulos disponibles</span></div>';
                return;
            }
            
            // Generar elementos de navegación
            container.innerHTML = '';
            accessibleModules.forEach(module => {
                const navItem = document.createElement('div');
                navItem.className = 'nav-item';
                navItem.onclick = function() {
                    window.location.href = module.link || '#';
                };
                
                navItem.innerHTML = `
                    <i class="fas ${module.icon || 'fa-cube'}"></i>
                    <span>${module.title || 'Módulo sin nombre'}</span>
                `;
                
                container.appendChild(navItem);
            });
        }
        
        // Mostrar mensaje de error
        function showError(message) {
            const container = document.getElementById('dashboardContainer');
            container.innerHTML = `<div class="error-message">${message}</div>`;
        }
        
        // Mostrar información de depuración
        function showDebugInfo(content) {
            const debugInfo = document.getElementById('debugInfo');
            debugInfo.innerHTML = content;
        }
        
        // Alternar visibilidad de información de depuración
        function toggleDebugInfo() {
            const debugInfo = document.getElementById('debugInfo');
            const debugToggle = document.getElementById('debugToggle');
            
            if (debugInfo.style.display === 'none') {
                debugInfo.style.display = 'block';
                debugToggle.textContent = 'Ocultar información técnica';
            } else {
                debugInfo.style.display = 'none';
                debugToggle.textContent = 'Mostrar información técnica';
            }
        }
        
        // Cerrar sesión
        function logout() {
            const userData = JSON.parse(sessionStorage.getItem('currentUser'));
            
            if (userData?.username) {
                // Eliminar de usuarios activos
                activeUsersRef.child(userData.username).remove()
                    .then(() => {
                        sessionStorage.removeItem('currentUser');
                        window.location.href = 'index.html';
                    })
                    .catch(error => {
                        console.error('Error al cerrar sesión:', error);
                        sessionStorage.removeItem('currentUser');
                        window.location.href = 'index.html';
                    });
            } else {
                sessionStorage.removeItem('currentUser');
                window.location.href = 'index.html';
            }
        }
    </script>
</body>
</html>